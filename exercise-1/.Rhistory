source('~/Desktop/INFO201/a2-core-skills-michaelbantle/assignment.R', echo=TRUE)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- substr("Hello, my name is", "Hey, I'm", my_intro)
casual_intro
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
casual_intro
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- upper.tri(my_intro)
loud_intro
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
loud_intro
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet intro <- tolower(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
quiet_intro
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
install.packages("stringr")
library(stringr)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <-
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurences <- nchar("e", my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <-
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurences <- nchar(my_intro, "e")
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <-
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurences <- length("e", my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <-
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurences <- length(grep("e", my_intro))
occurences
my_intro
grep?
?grep
?grep
?length
?nchar
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
capitalized
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurences <- str_count("e", my_intro)
occurences
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurences <- str_count(my_intro, "e")
occurences
my_intro
# Write a function `double()` that takes in a value and
# returns that value times two
double <- double(x)
y <- 2x
# Write a function `double()` that takes in a value and
# returns that value times two
double <- double(x,y) {
y <- 2x
}
# Write a function `double()` that takes in a value and
# returns that value times two
double() <- double(x,y) {
y <- 2x
}
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter", "Click", "21", "Boiler Room", "Avatar", "Sandlot")
movies
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- subset(3, movies)
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- subset(1:3, movies)
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- subset(movies, 1:3)
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- subset(movies, 3)
grades <- c(1, 2, 3, 4, 5)
length <- grades[grades < 3]
length
ln <- grades < 3
ln
values <- 1:100
odd_values <- values[c[T, F]]
odd_values
values
odd_values <- values[c[T, F]]
odd_values <- values(c[T, F])
odd_values
odd_values <- values[c(T, F)]
odd_values
words <- c("it", "me", "you")
length(words)
paste(words, collapse = " ")
install.packages(styler)
install.packages('styler')
install.packages('lintr')
hello
"hello"
styler:::style_active_file()
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("hashbrowns", "eggs", "fruit")
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("hashbrowns", "eggs", "fruit")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("sandwich", "salad")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
meals
meals.1 <- c(my_breakfast, my_lunch)
meals.1
meals
meals
meals.1
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
meals
meals.1
breakfast = my_breakfast
meals
meals <- list(my_breakfast = my_breakfast, my_lunch)
meals <- list(my_breakfast = my_breakfast, my_lunch)
meals
meals
meals
meals <- list(my_breakfast = my_breakfast, my_lunch)
meals
meals
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[3]] <- c("pizza", "rice")
meals
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
my_dinner <- meals[[3]]
my_dinner
meals$my_dinner
library(lintr)
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
library('lintr')
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
library("lintr")
setwd("~/Desktop/INFO201/ch8-lists/exercise-1")
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal)
heights <- 58:62
weights <- 117:122
my_data <- data.frame(heights, weights)
heights <- 58:62
weights <- 117:122
my_data <- data.frame(heights, weights)
my_data <- data.frame(heights, weights)
heights <- 58:63
weights <- 117:122
my_data <- data.frame(heights, weights)
m
my_data <- data.frame(heights, weights)
my_data
View(my_data)
colnames(my_data)
colnames("h", "w")
colnames(my_data, "h", "w")
colnames(my_data, h, w)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawks_scores <- c(9, 12, 27, 46)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
seahawks_scores_alowwed <- c(17, 9, 33, 18)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_scores, seahawks_scores_alowwed)
View(games)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
diff <- seahawks_scores - seahawks_scores_alowwed
games[[difference]] <- diff
games
View(games)
games$difference <- diff
games
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$difference > 0
games
